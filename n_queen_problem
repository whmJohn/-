//
//  main.cpp
//  n_queen_problem
//
//  Created by whm内芽 on 2019/5/19.
//  Copyright © 2019 whm内芽. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define INITIAL -10000   //棋盘的初始值

int a[50];    //一维数组表示棋盘
int b[1000][50];

void init(int QUEEN) {  //对棋盘进行初始化
    int *p;
    for (p = a; p < a + QUEEN; ++p) {
        *p = INITIAL;
    }
}

int valid(int row, int col, int QUEEN) {   //判断第row行第col列是否可以放置皇后
    int i;
    for (i = 0; i < QUEEN; ++i) {   //对棋盘进行扫描
        if (a[i] == col || abs(i - row) == abs(a[i] - col))   //判断列冲突与斜线上的冲突
            return 0;
    }
    return 1;
}

void print(int n,int QUEEN,FILE *fp) {    //打印输出N皇后的一组解
    int i;
    for (int j = 0; j < n; j++) {
        for (i = 0; i < QUEEN; ++i) {
            printf("%d ", b[j][i]+1);
            fprintf(fp,"%d ",b[j][i]+1);
        }
        printf("\n");
        fprintf(fp,"\n");
    }
}

void queen(int QUEEN,FILE *fp) {      //N皇后程序
    int n = 0;
    int i = 0, j = 0;
    while (i < QUEEN) {
        while (j < QUEEN) {       //对i行的每一列进行探测，看是否可以放置皇后
            if(valid(i, j,QUEEN)) {      //该位置可以放置皇后
                a[i] = j;        //第i行放置皇后
                j = 0;           //第i行放置皇后以后，需要继续探测下一行的皇后位置，所以此处将j清零，从下一行的第0列开始逐列探测
                break;
            }
            else {
                ++j;             //继续探测下一列
            }
        }
        if(a[i] == INITIAL) {        //第i行没有找到可以放置皇后的位置
            if (i == 0)             //回溯到第一行，仍然无法找到可以放置皇后的位置，则说明已经找到所有的解，程序终止
                break;
            else {                   //没有找到可以放置皇后的列，回溯
                --i;
                j = a[i] + 1;        //把上一行皇后的位置往后移一列
                a[i] = INITIAL;      //把上一行皇后的位置清除，重新探测
                continue;
            }
        }
        if (i == QUEEN - 1) {         //最后一行找到了一个皇后位置，说明找到一个结果，打印出来
            n++;
            for (int z = 0;z < QUEEN;z++) {
                b[n-1][z] = a[z];
            }
            j = a[i] + 1;             //从最后一行放置皇后列数的下一列继续探测
            a[i] = INITIAL;           //清除最后一行的皇后位置
            continue;
        }
        ++i;              //继续探测下一行的皇后位置
    }
    printf("%d %d\n",QUEEN,n);
    fprintf(fp,"%d %d\n",QUEEN,n);
    print(n,QUEEN,fp);
}

int main(void) {
    FILE *fp;
    FILE *fp1;
    int m;
    int QUEEN;
    if ((fp=fopen("/Users/john/Desktop/queen.txt","r"))==NULL) {
        printf("无法打开此文件!\n");
    }
    if ((fp1=fopen("/Users/john/Desktop/queen_20161004018.txt","w"))==NULL) {
        printf("无法打开此文件!\n");
    }
    fscanf(fp, "%d",&m);
    for (int o = 0; o < m; o++) {
        fscanf(fp, "%d",&QUEEN);
        init(QUEEN);
        queen(QUEEN,fp1);
    }
    fclose(fp);
    fclose(fp1);
    return 0;
    
}
