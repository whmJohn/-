#include <stdio.h>
//分治法求最大子数组和问题
struct PositioASum {
    int low;
    int high;
    int sum;
};
//寻找包含中点位置的最大子数组函数
PositioASum MaxCrossingSubarray(int a[], int low, int mid, int high) {
    //求中点左边的最大值和最大位置
    int maxLeft=0;//记录左边的最大位置
    int maxSumLeft=-10000;//记录左边的最大和
    int sumLeft=0;
    for (int i = mid; i >= low; i--) {
        sumLeft += a[i];
        if (sumLeft > maxSumLeft) {
            maxSumLeft = sumLeft;
            maxLeft = i;
        }
    }
    //求中点右边的最大值和最大位置
    int maxRight=mid+1;//记录右边的最大位置
    int maxSumRight = -10000;//记录右边的最大和
    int sumRight = 0;//记录右边子数列的和
    for (int i = mid+1; i <= high; i++) {
        sumRight += a[i];
        if (sumRight > maxSumRight) {
            maxSumRight = sumRight;
            maxRight = i;
        }
    }
    PositioASum ps;
    ps.low = maxLeft;
    ps.high = maxRight;
    ps.sum = maxSumLeft + maxSumRight;
    return ps;
}
//分治法
PositioASum FindMaxSubArray(int a[], int low, int high) {
    if (low == high) {
        PositioASum ps;
        ps.low = low;
        ps.high = high;
        ps.sum = a[low];
        return ps;
    }
    else{
        int mid = (low + high) / 2;
        PositioASum left = FindMaxSubArray(a, low, mid);
        PositioASum right = FindMaxSubArray(a, mid + 1, high);
        PositioASum cross = MaxCrossingSubarray(a, low, mid, high);
        if (left.sum >= cross.sum && left.sum >= right.sum) {
            return left;
        }
        else if (right.sum >= left.sum && right.sum >= cross.sum) {
            return right;
        }else {
            return cross;
        }
    }
}

int main() {
    int A[5] = {5,6,6,0,-3};
    PositioASum result = FindMaxSubArray(A, 0, 4);
    printf("%d  %d  %d", result.low+1, result.high+1, result.sum);//将结果打印出来
    getchar();
    return 0;
}
