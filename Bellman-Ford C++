//
//  main.cpp
//  Bellman-Ford
//
//  Created by whm内芽 on 2019/4/26.
//  Copyright © 2019 whm内芽. All rights reserved.
//

#include <iostream>
#include <stdio.h>

using namespace std;

#define MAX 999
#define N 99 //边的最大数量
int nodenum, edgenum, original; //点数量，边数量，源点

//边的结构体定义
typedef struct Edge {
    int u, v;
    int cost;
}Edge;

Edge edge[N];
int dis[N], pre[N];//距离与前驱数组

//松弛函数
void Relax(int Start,int End,int Weight) {
    if(dis[End]>dis[Start]+Weight) {
        dis[End]=dis[Start]+Weight;
        pre[End] = Start;
    }
}

bool Bellman_Ford() {
    for(int i = 1; i <= nodenum; ++i) //对距离的初始化
        dis[i] = (i == original ? 0 : MAX);
    for(int i = 1; i <= nodenum - 1; ++i) {
        for(int j = 1; j <= edgenum; ++j) {
            Relax(edge[j].u,edge[j].v,edge[j].cost);
        }
    }
    bool flag = 1; //判断是否含有负权回路
    for(int i = 1; i <= edgenum; ++i)
        if(dis[edge[i].v] > dis[edge[i].u] + edge[i].cost) {
            flag = 0;
            break;
        }
    return flag;
}

//打印最短路的路径（反向）
void print_path(int root) {
    while(root != pre[root]) { //前驱
        printf("%d-->", root);
        root = pre[root];
    }
    if(root == pre[root])
        printf("%d\n", root);
}

int main() {
    printf("请输入结点的数目，边的数目和源结点:\n");
    scanf("%d%d%d", &nodenum, &edgenum, &original);
    pre[original] = original;
    for(int i = 1; i <= edgenum; ++i) {
        scanf("%d%d%d", &edge[i].u, &edge[i].v, &edge[i].cost);
    }
    if(Bellman_Ford())
        for(int i = 1; i <= nodenum; ++i) { //每个点最短路
            printf("%d\n", dis[i]);
            printf("Path:");
            print_path(i);
        }
    else
        printf("have negative circle!\n");
    return 0;
}



