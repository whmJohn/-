//
//  main.cpp
//  20161004018_4
//
//  Created by whm内芽 on 2019/4/17.
//  Copyright © 2019 whm内芽. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <string>
#include <stdlib.h>

using namespace std;

class STACK {
    int  *const  elems;    //申请内存用于存放栈的元素
    const  int   max;    //栈能存放的最大元素个数
    int   pos;            //栈实际已有元素个数，栈空时pos=0;
public:
    STACK(int m);        //初始化栈：最多m个元素
    STACK(const STACK&s);             //用栈s拷贝初始化栈
    virtual int  size() const;            //返回栈的最大元素个数max
    virtual operator int() const;            //返回栈的实际元素个数pos
    virtual int operator[ ] (int x) const;    //取下标x处的栈元素
    virtual STACK& operator<<(int e);     //将e入栈,并返回栈
    virtual STACK& operator>>(int &e);    //出栈到e,并返回栈
    virtual STACK& operator=(const STACK&s); //赋s给栈,并返回被赋值的栈
    virtual void print() const;            //打印栈
    virtual ~STACK();                    //销毁栈
};

class QUEUE :public STACK {
    STACK  s2;
public:
    QUEUE(int m); //每个栈最多m个元素，要求实现的队列最多能入2m个元素
    QUEUE(const QUEUE&s);             //用队列s拷贝初始化队列
    virtual operator int() const;            //返回队列的实际元素个数
    virtual int full() const;               //返回队列是否已满，满返回1，否则返回0
    virtual int operator[ ](int x)const;   //取下标为x的元素，第1个元素下标为0
    virtual QUEUE& operator<<(int e);  //将e入队列,并返回队列
    virtual QUEUE& operator>>(int &e);    //出队列到e,并返回队列
    virtual QUEUE& operator=(const QUEUE&s); //赋s给队列,并返回被赋值的队列
    virtual void print() const;            //打印队列
    virtual ~QUEUE();                    //销毁队列
};

int main(int argc, char *argv[])
{
    int l;
    printf("是否进行舞伴解答，如是，则输入1，否则输入0:");
    scanf("%d",&l);
    if (l == 0) {
        QUEUE *p = 0;//指向当前栈
        QUEUE *q = 0;//指向当前栈
        p = new QUEUE(10);
        QUEUE *s1, *s2;
        s1 = new QUEUE(10);
        s2 = new QUEUE(10);
        q = new QUEUE(10);
        for (int i=0;i<10;i++) {
            *q<<(i+1);
        }
        printf("队列q的元素为：");
        q->print();
        int n = 0;
        int m = 0;
        int x = 0;
        int e = 0;
        do {
            puts("\t\t*****************MENU****************\n\n");
            puts("\t\t\t\t 1.初始化队列");
            puts("\t\t\t\t 2.用已有的队列q来初始化队列");
            puts("\t\t\t\t 3.返回栈队列内容量");
            puts("\t\t\t\t 4.返回队列内的元素个数");
            puts("\t\t\t\t 5.取下标x处的队列元素");
            puts("\t\t\t\t 6.元素入队列");
            puts("\t\t\t\t 7.元素出队列");
            puts("\t\t\t\t 8.将已有的队列赋给p所指的队列");
            puts("\t\t\t\t 9.打印队列内元素");
            puts("\t\t\t\t 10.销毁队列并且退出");
            puts("\n\n\t\t ************************************\n");
            printf("choice your number(1-10): \b\b");
            scanf("%d",&n);
            if (n<1||n>10) {
                printf("请重新输入正确的功能编号！");
                getchar();//要求用户重新输入数字
            }
            //选择功能
            switch (n) {
                case 1:
                    printf("你想要初始化的栈的大小为？\n");
                    scanf("%d",&m);
                    p = new QUEUE(2*m);
                    printf("初始化的队列的容量为%d\n",2*m);
                    break;
                case 2:
                    p = new QUEUE(*q);
                    printf("以队列q对队列进行的初始化成功！\n");
                    printf("初始化的队列的元素个数为%d\n",p->operator int());
                    break;
                case 3:
                    if (p) {
                        printf("队列的容量为%d\n",p->size());
                    }
                    break;
                case 4:
                    printf("队列目前有%d个元素。\n",p->operator int());
                    break;
                case 5:
                    do {
                        printf("你想要查找队列的元素的位置为？\n");
                        scanf("%d",&x);
                        if ((*p)[x] == -1){
                            printf("查找的位置超出范围，请重新输入:\n");
                        }
                    }while((*p)[x]==-1);
                    printf("该位置的队列内元素为%d\n",(*p)[x]);
                    break;
                case 6:
                    printf("你想要入队列的元素为？\n");
                    scanf("%d",&e);
                    if (!p||p->operator int() >= p->size()) {
                        printf("元素入队列失败！\n");
                    }
                    else
                        printf("入队列成功！\n");
                    *p<<e;
                    break;
                case 7:
                    if (!p || p->operator int()<=0) {
                        printf("元素出队列失败！\n");
                    }
                    else {
                        *p>>e;
                        printf("出队列成功！\n");
                        printf("出队列的元素为%d\n",e);
                    }
                    break;
                case 8:
                    *p = *q;
                    printf("、队列赋值成功！\n");
                    break;
                case 9:
                    p->print();
                    break;
                case 10:
                    p->~QUEUE();
                    printf("队列销毁成功！\n");
                    exit(0);
            }
        }while (1);
        
    }
    else {
        int manlength, womenlength;//男女队列长度
        int manadd, womenadd;//男女的位置
        int num = 0;
        int i;
        cout << "请输入男士队列长度:" << endl;
        cin >> manlength;
        cout << "请输入女士队列长度:" << endl;
        cin >> womenlength;
        cout << "请输入男士在队列的位置:" << endl;
        cin >> manadd;
        cout << "请输入女士在队列的位置:" << endl;
        cin >> womenadd;
        QUEUE manQ(manlength), womenQ(womenlength);
        for (i = 1; i <= manlength; i++)
        {
            if (i == manadd)
                manQ << 1;
            else
                manQ << 0;
        }
        for (i = 1; i <= womenlength; i++)
        {
            if (i == womenadd)
                womenQ << 1;
            else
                womenQ << 0;
        }
        int mannum = 0, womennum = 0;
        for (num = 0; !(mannum == 1 && womennum == 1); num++)
        {
            manQ >> mannum;
            manQ << mannum;
            womenQ >> womennum;
            womenQ << womennum;
            if (num > 100)
            {
                cout << "舞会结束了，男士仍然没有等到那位女士" << endl;
                getchar();
                exit(-1);
            }
        }
        cout << "男士终于在第" << num << "支舞等到了女士" << endl;
        getchar();
    }
    return 0;
}


STACK::STACK(int m) :max(m), elems(new int[m]) {
    this->pos = 0;
}

STACK::STACK(const STACK&s) : max(s.max), elems(new int[s.max]) {
    int i;
    for (i = 0; i < s.pos; i++) {
        this->elems[i] = s.elems[i];
        pos++;
    }
}

int STACK::size()const {
    return this->max;
}

STACK::operator int(void)const {
    return this->pos;
}

int STACK::operator[](int x)const {
    if (x >= this->pos) {
        return -1;
    }
    return this->elems[x];
}

STACK& STACK::operator<<(int e) {
    STACK *temp = new STACK (0);
    if (this->pos >= this->max) {
        return *temp;
    }
    this->elems[this->pos] = e;
    (this->pos)++;
    return *this;
}

STACK& STACK::operator>>(int &e) {
    STACK *temp = new STACK (0);
    if (this->pos <= 0) {
        return *temp;
    }
    (this->pos)--;
    e = this->elems[(this->pos)];
    return *this;
}

STACK& STACK::operator=(const STACK&s) {
    if (this == &s) {
        return *this;
    }
    delete[] this->elems;
    *((int **)&elems) = new int[s.max];
    *((int*)&max) = s.max;
    this->pos = s.pos;
    return *this;
}

void STACK::print()const {
    int i;
    for (i = 0; i < pos; i++)
        cout << elems[i] << "  ";
}

STACK::~STACK() {
    if (elems)
        delete []elems;
    *(int *)&max = 0;
    *(int**)&elems = 0;
    this->pos = 0;
}

//队列初始化
QUEUE::QUEUE(int m) :STACK(m), s2(m) {
    ;
}
//拷贝队列s
QUEUE::QUEUE(const QUEUE&s) : STACK(s), s2(s.s2) {
    ;
}
//摧毁队列
QUEUE::~QUEUE() {
    ;
}
//返回队列的实际元素个数
QUEUE::operator int()const {
    return STACK::operator int() + s2.operator int();
}
//返回队列是否已满，满返回1，否则返回0
int QUEUE::full()const {
    int equal = 0;
    if (STACK::operator int() == STACK::size())
        equal = 1;
    if (equal && s2.operator int())//若栈1满了，而且栈二有元素，此时无法继续入队列了
        return 1;
    else return 0;
}
//取下标为x的元素，第1个元素下标为0
int QUEUE::operator[](int x)const {
    if (x < s2.operator int())
        //在s2中
        return s2[s2.operator int() - x - 1];
    else if (x < this->operator int())
        //在栈1中
        return STACK::operator[](x - s2.operator int());
    else//不合范围
        return -1;
}
//将e入队列,并返回队列
QUEUE& QUEUE::operator<<(int e) {
    if (this->full()) //队列满，无法入队列
        return *this;
    else
    {
        if (STACK::operator int() == STACK::size())
        {
            for (; STACK::operator int() > 0;)
            {
                int temp;
                STACK::operator >>(temp);
                this->s2 << temp;
            }
        }
        STACK::operator <<(e);
    }
    return *this;
}
//出队列到e,并返回队列
QUEUE& QUEUE::operator>>(int &e) {
    if (this->operator int() <= 0)//栈1除了一开始的情况应该一直有元素在
        return *this;
    if (s2.operator int() != 0)
        s2 >> e;
    else
    {
        int i, str;
        int j = STACK::operator int();
        for (i = 0; i < j; i++) {
            STACK::operator>>(str);
            s2 << str;
        }
        s2 >> e;
    }
    return *this;
}
//赋s给队列,并返回被赋值的队列
QUEUE& QUEUE::operator=(const QUEUE&s) {
    STACK::operator=(s);
    s2 = s.s2;
    return *this;
}
//打印栈
void QUEUE::print()const {
    int i, count;
    i = 0;
    count = this->operator int();
    for (i = 0; i < count; i++)
        cout << this->operator[](i) << "  ";
}

